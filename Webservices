Hi Team,
#Letest #update #real_time
#Web #services #interview #questions #answers  #experience 3+
Q.A Web Service can be defined by following ways:
=============================================
-> A web service is a client server application or application component for communication.
-> It is method of communication between two devices over network.
-> It is a software system for interoperable machine to machine communication.
-> It is a collection of standards or protocols for exchanging information between two devices or application.
-> For example, java application can interact with Java, .Net and PHP applications. 
     So web service is a language independent way of communication.

Types of Web Services
==============================
-> There are mainly two types of web services.
1. SOAP web services.
2. RESTful web services.

Q.Q What are the components of web service?

Web Service Components:
===========================
There are three major web service components.
1. SOAP--Simple Object Access Protocol
2. WSDL-Web Service Description language
3. UDDI--Universal Description, Discovery, and Integration
4.XML- Extensible Markup Language

SOAP
==================
-> SOAP is an acronym for Simple Object Access Protocol.
-> SOAP is a XML-based protocol for accessing web services.
-> SOAP is a W3C recommendation for communication between applications.
-> SOAP is XML based, so it is platform independent and language independent. In other words, it can be used with Java, .Net or PHP language on any platform.

WSDL
=======================
-> WSDL is an acronym for Web Services Description Language.
-> WSDL is a xml document containing information about web services such as method name, method parameter and how to access it.
-> WSDL is a part of UDDI. It acts as a interface between web service applications.
-> WSDL is pronounced as "wiz-dull".

UDDI
====================
-> UDDI is an acronym for Universal Description, Discovery and Integration.
-> UDDI is a XML based framework for describing, discovering and integrating web services.
-> UDDI is a directory of web service interfaces described by WSDL, containing information about web services. 

Q.SOAP vs REST Web Services
=================================
1. SOAP is a Protocol. Whereas Rest is an architectural style.
2. SOAP stands for Simple Object Access Protocol. Whereas Rest stands for REpresentational State Transfer.
3. SOAP can't use REST because it is a protocol. Whereas REST can use SOAP web services because it is a concept
     and can use any protocol like HTTP, SOAP.
4. SOAP uses services interfaces to expose the business logic. Whereas REST uses URI to expose business logic.
5. JAX-WS is the java API for SOAP web services. Whereas JAX-RS is the java API for RESTful web services.
6. SOAP defines standards to be strictly followed. Whereas REST doesn't define too much standards like SOAP.
7. SOAP requires more bandwidth and resource than REST. Whereas REST requires less bandwidth and resource than SOAP.
8. SOAP defines its own security. Whereas RESTful web services inherits security measures from the underlying transport.
9. SOAP permits XML data format only. Whereas REST permits different data format such as Plain text, HTML, XML, JSON etc.
10. SOAP is less perferred than REST. Whereas REST is more preferred than SOAP.
=============================================================================================================
Q.WSDL document contains the following elements:
Ans-1. Definition
2. Data types
3. Message
4. Operation
5. Port types
6. Binding
7. Port
8. Service

5. REST Methods
Ans-GET
=============================================
HTTP GET method is used to **read** (or retrieve) a representation of a resource. 
According to the design of the HTTP specification, GET requests are used only to read data and not change it.
Therefore, when used this way, they are considered safe.
That is, they can be called without risk of data modification or corruption. Means calling it once has the same effect as calling it 10 times.
Additionally, GET is idempotent which means that making multiple identical requests ends up having the same result as a single request.
Donot expose unsafe operations via GET. It should never modify any resources on the server.
Example:
------------
   GET http://www.example.com/customers/12345/orders

POST
===================================
-> The POST verb is most-often utilized to **create** new resources. In particular, it's used to create subordinate resources. 
-> That is, subordinate to some other (e.g. parent) resource. 
-> In other words, when creating a new resource, POST to the parent and the service takes care of associating the new resource 
     with the parent, assigning an ID (new resource URI), etc.
-> On successful creation, return HTTP status 201, returning a Location header with a link to the newly-created resource with 
     the 201 HTTP status.
-> POST is neither safe nor idempotent. It is therefore recommended for non-idempotent resource requests. 
     Making two identical POST requests will most-likely result in two resources containing the same information.

Examples:
---------------
    POST http://www.example.com/customers/12345/orders

PUT
=====================
-> PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body 
     containing the newly-updated representation of the original resource.
-> However, PUT can also be used to create a resource in the case where the resource ID is chosen by the client 
     instead of by the server. In other words, if the PUT is to a URI that contains the value of a non-existent resource ID. 
-> Again, the request body contains a resource representation. Many feel this is convoluted and confusing. 
     Consequently, this method of creation should be used sparingly, if at all.
-> Alternatively, use POST to create new resources and provide the client-defined ID in the body representation—
     presumably to a URI that doesn't include the ID of the resource (see POST below).
-> On successful update, return 200 (or 204 if not returning any content in the body) from a PUT. 
     If using PUT for create, return HTTP status 201 on successful creation. A body in the response is optional—
     providing one consumes more bandwidth. It is not necessary to return a link via a Location header in the 
     creation case since the client already set the resource ID.
-> PUT is not a safe operation, in that it modifies (or creates) state on the server, but it is idempotent. 
     In other words, if you create or update a resource using PUT and then make that same call again, the resource 
     is still there and still has the same state as it did with the first call.
-> If, for instance, calling PUT on a resource increments a counter within the resource, the call is no longer idempotent. 
    Sometimes that happens and it may be enough to document that the call is not idempotent. 
    However, it's recommended to keep PUT requests idempotent. It is strongly recommended to use POST for non-idempotent requests.

Examples:
---------------
    PUT http://www.example.com/customers/12345/orders/98765

PATCH
======================
->PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
-> This resembles PUT, but the body contains a set of instructions describing how a resource currently residing on the server 
     should be modified to produce a new version. 
-> This means that the PATCH body should not just be a modified part of the resource, but in some kind of patch language like JSON Patch or XML Patch.
-> PATCH is neither safe nor idempotent. However, a PATCH request can be issued in such a way as to be idempotent, 
     which also helps prevent bad outcomes from collisions between two PATCH requests on the same resource in a similar time frame.
-> Collisions from multiple PATCH requests may be more dangerous than PUT collisions because some patch formats need to 
     operate from a known base-point or else they will corrupt the resource. 
-> Clients using this kind of patch application should use a conditional request such that the request will fail if the resource 
     has been updated since the client last accessed the resource. 
-> For example, the client can use a strong ETag in an If-Match header on the PATCH request.
-> Examples:
    PATCH http://www.example.com/customers/12345/orders/98765

DELETE
=========================
->DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.
-> On successful deletion, return HTTP status 200 (OK) along with a response body, perhaps the representation 
    of the deleted item (often demands too much bandwidth), or a wrapped response (see Return Values below). 
    Either that or return HTTP status 204 (NO CONTENT) with no response body. 
    In other words, a 204 status with no body, or the JSEND-style response and HTTP status 200 are the recommended responses.
-> HTTP-spec-wise, DELETE operations are idempotent. If you DELETE a resource, it's removed. 
     Repeatedly calling DELETE on that resource ends up the same: the resource is gone. 
     If calling DELETE say, decrements a counter (within the resource), the DELETE call is no longer idempotent. 
     As mentioned previously, usage statistics and measurements may be updated while still considering the service 
     idempotent as long as no resource data is changed. Using POST for non-idempotent resource requests is recommended.
-> There is a caveat about DELETE idempotence, however. Calling DELETE on a resource a second time will often 
     return a 404 (NOT FOUND) since it was already removed and therefore is no longer findable. 
     This, by some opinions, makes DELETE operations no longer idempotent, however, the end-state of the resource is the same. 
     Returning a 404 is acceptable and communicates accurately the status of the call.

Examples:
    DELETE http://www.example.com/customers/12345/orders

Q. What Http Status Code 200 States?
Ans-It means, OK, shows success.

Q. What Http Status Code 201 States?
Answer :It means, CREATED, when a resource is successful created using POST or PUT request. Return link to newly created resource using location header.
 Q.What Http Status Code 204 States?
Answer :It means, NO CONTENT, when response body is empty for example, a DELETE request.
Q. What Http Status Code 304 States?

Answer :It means, NOT MODIFIED, used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location etc.

Q.What Http Status Code 400 States?

Q.It means, BAD REQUEST, states that invalid input is provided e.g. validation error, missing data.

Q.What Http Status Code 401 States?

Answer :It means, FORBIDDEN, states that user is not having access to method being used for example, delete access without admin rights.

Question 47. What Http Status Code 404 States?

Answer :It means, NOT FOUND, states that method is not available.

Q. What Http Status Code 409 States?

Ans:It means, CONFLICT, states conflict situation while executing the method for example, adding duplicate entry.

Question 49. What Http Status Code 500 States?

Answer:It means, INTERNAL SERVER ERROR, states that server has thrown some exception while executing the method.

Q.SPRING with REST Integration.
Ans-@RestController
@RequestMapping("/product")
public class ProductRestController {

 @RequestMapping(method = RequestMethod.GET, value = "/{productNo}", produces = "text/plain")
 public String getProductName(@PathVariable("productNo") String productNo) {
 return "Microwave";
 }

 @RequestMapping(value = "/details/{productNo}", method = RequestMethod.GET, produces = "application/json")
 public Product getProductDetails(@PathVariable("productNo") String productNo) {
 Product product = null;

 product = new Product();
 product.setProductNo(productNo);
 product.setProductName("Television");
 product.setManufacturer("Samsung");
 product.setPrice(35353.34f);
 return product;
 }

 @RequestMapping(method = RequestMethod.POST, consumes = "application/json")
 public ResponseEntity<String> addProduct(@RequestBody Product product) {
 ResponseEntity<String> responseEntity = null;

 responseEntity = new ResponseEntity<String>("Your product : " + product.getProductName() + " has been added",
 HttpStatus.CREATED);
 return responseEntity;
 }

}
